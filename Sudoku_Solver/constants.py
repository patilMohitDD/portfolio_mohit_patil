sudokus = {
    1:[["2", ".", ".", ".", "6", ".", ".", ".", "7"],
[".", ".", ".", ".", ".", ".", "9", ".", "."],
[".", ".", "7", ".", ".", ".", ".", ".", "3"],
[".", ".", ".", ".", ".", ".", ".", ".", "."],
["4", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", "1", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", "8", "."],
[".", ".", ".", ".", ".", ".", ".", ".", "6"],
["1", ".", ".", ".", ".", ".", ".", ".", "."]],

    2: [[".", "3", ".", "2", ".", ".", ".", ".", "."],
[".", ".", ".", ".", "1", ".", ".", ".", "6"],
[".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", "7", ".", ".", ".", ".", "5"],
[".", ".", ".", ".", ".", "2", ".", ".", "."],
[".", ".", ".", ".", ".", ".", "6", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", "."],
["6", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", ".", ".", ".", "4", "."]
],

    3:[[".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", "6", ".", ".", ".", ".", ".", "1"],
[".", ".", ".", ".", ".", ".", "3", ".", "."],
[".", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", ".", "7", ".", ".", ".", "6"],
[".", ".", ".", ".", ".", ".", ".", ".", "."],
["2", ".", ".", ".", ".", ".", ".", ".", "."],
[".", ".", ".", "1", ".", ".", ".", "3", "."],
[".", ".", ".", ".", ".", ".", ".", ".", "."]
]

}


# board = [[".", "3", ".", "2", ".", ".", ".", ".", "."],
# [".", ".", ".", ".", "1", ".", ".", ".", "6"],
# [".", ".", ".", ".", ".", ".", ".", ".", "."],
# [".", ".", ".", "7", ".", ".", ".", ".", "5"],
# [".", ".", ".", ".", ".", "2", ".", ".", "."],
# [".", ".", ".", ".", ".", ".", "6", ".", "."],
# [".", ".", ".", ".", ".", ".", ".", ".", "."],
# ["6", ".", ".", ".", ".", ".", ".", ".", "."],
# [".", ".", ".", ".", ".", ".", ".", "4", "."]
# ]

# print(
#     sudo(board)
#     )

# n = 9
# def isValid(row, col, ch, board):
#     row, col = int(row), int(col)
    
#     for i in range(9):
        
#         if board[i][col] == ch:
#             return False
#         if board[row][i] == ch:
#             return False
        
#         if board[3*(row//3) + i//3][3*(col//3) + i%3] == ch:
#             return False
    
#     return True
    
# def solve(row, col, board):
#     if row == n:
#         return True
#     if col == n:
#         return solve(row+1, 0, board)
    
#     if board[row][col] == ".":
#         for i in range(1, 10):
#             if isValid(row, col, str(i), board):
#                 board[row][col] = str(i)
                
#                 if solve(row, col + 1, board):
#                     return True
#                 else:
#                     board[row][col] = "."
#         return False
#     else:
#         return solve(row, col + 1, board)
    
    

# solve(0, 0, board)
# print(board)
